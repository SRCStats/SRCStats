@using System.Globalization
@using System.Diagnostics
@using Microsoft.AspNetCore.Components

@using SRCStats.Models.SRC
@model SRCStats.Models.User

@{
	ViewData["Title"] = $"User Stats - {Model.Name}";
	TextInfo ti = new CultureInfo("en-US", false).TextInfo;
}

@section Scripts
{
	<script src="~/js/user_page.js" defer></script>
	<link href="~/css/user_page.css" rel="stylesheet" />
}

<div class="container pb-3">
	<div class="row button-controls">
		<div class="col-12 d-flex gap-2 align-items-center justify-content-center">
			<a class="btn btn-primary" href="~/users">
				<i class="bi bi-skip-backward-fill"></i> Return
			</a>
			<form method="post" asp-action="ForceUsers">
				<input asp-for="Name" value="@Model.Name" hidden>
				<button type="submit" disabled="@(!(Model.LastUpdated.AddMinutes(10) < DateTime.UtcNow) && !Debugger.IsAttached)" class="btn btn-warning"><i class="bi bi-arrow-clockwise"></i> Refresh</button>
			</form>
		</div>
	</div>
	<div class="row user-profile d-flex align-items-center justify-content-center">
		<div class="col-md-6 col-xs-12 d-flex flex-column align-items-center justify-content-center">
			@if (Model.Image != null)
			{
				<div class="user-profile-picture pb-3">
					<img src="@Model.Image" draggable="false" alt="User Profile Picture">
				</div>
			}
			<h2 class="text-center">
				<span class="icons d-inline-block">
					@* todo: use balloon or similar for popups on these to display the alt text *@
					@if (Model.Icon != null)
					{
						<img draggable="false" src="@Model.Icon" alt="@(Model.Role != "user" ? ti.ToTitleCase(Model.Role) : null)">
					}
					@if (Model.SupporterIcon != null)
					{
						<img draggable="false" src="@Model.SupporterIcon" alt="Speedrun.com Supporter">
					}
				</span>
				<span class="user-info">
					@* todo: make this look like src's name gradient? (per letter instead of clip) *@
					<span class="username" style="@(Model.NameStyle.Style == "gradient" ? $"background-image: linear-gradient(60deg, {Model.NameStyle.ColorFrom.Light}, {Model.NameStyle.ColorTo.Light}); color: transparent;" : $"color: {Model.NameStyle.Color.Light}")">@Model.Name </span>
					@if (Model.Pronouns != null && Model.Pronouns.Length > 0)
					{
						<span class="pronouns">(@Model.Pronouns)</span>
					}
				</span>
			</h2>
			@if (Model.Location != null && Model.Location.Country != null && Model.Location.Country.Names != null)
			{
				<h4>@((Model.Location.Country.Code != "vh" ? string.Concat(Model.Location.Country.Code.Substring(0, 2).ToUpper().Select(x => char.ConvertFromUtf32(x + 0x1F1A5))) : "") + " " + Model.Location.Country.Names.International)</h4>
			}
		</div>
		<div class="col-md-6 col-xs-12">
			<div class="user-stats w-100">
				<div class="row">
					<div class="col-6">
						<h3 class="mb-0">Runs</h3>
					</div>
					<div class="col-6">
						<h3 class="mb-0">@(Model.FullGameRuns + Model.IndividualLevelRuns)</h3>
						<p class="text-secondary mb-1">Full game: @Model.FullGameRuns</p>
						<p class="text-secondary mb-1">Individual level: @Model.IndividualLevelRuns</p>
					</div>
				</div>
				<div class="row">
					<div class="col-6">
						<h3 class="mb-0">Runs Reviewed</h3>
					</div>
					<div class="col-6">
						<h3 class="mb-0">@(Model.VerifiedRuns + Model.RejectedRuns)</h3>
						<p class="text-secondary mb-1">Full game: @Model.FullGameRuns</p>
						<p class="text-secondary mb-1">Individual level: @Model.IndividualLevelRuns</p>
					</div>
				</div>
				<div class="row" id="forum-posts">
					<div class="col-6">
						<h3>Forum Posts</h3>
					</div>
					<div class="col-6">
						<h3>@Model.ForumPosts</h3>
					</div>
				</div>
				<div class="row" id="total-run-time">
					<div class="col-6">
						<h3>Total Run Time</h3>
					</div>
					<div class="col-6">
						<h3>@(TimeSpan.FromSeconds(Model.TotalRunTime).ToString("d'd 'h'h 'm'm 's's'"))</h3>
					</div>
				</div>
				<div class="row" id="date-joined">
					<div class="col-6">
						<h3 class="mb-0">Date Joined</h3>
					</div>
					<div class="col-6">
						<h3 class="mb-0">@(Model.SignUpDate.ToString())</h3>
					</div>
				</div>
			</div>
		</div>
	</div>
	<div class="row user-results text-center">
		<div class="col-lg-6 col-xs-12">
			<div class="user-archetypes">
				<h3 class="pb-3">Archetypes</h3>
				<div class="archetypes-single">
					@{
						var archetypes = Model.Archetypes.ToArray();
						@for (int i = 0; i < Model.Archetypes.Count(); i++)
						{
							<div class="archetype">
								<h4 class="m-0">@(archetypes[i].ArchetypeMeta.Name)<sup><i title="@archetypes[i].ArchetypeMeta.Description" class="bi bi-question-circle fs-6 text-primary"></i></sup></h4>
								<p class="text-secondary m-0">@(archetypes[i].Value + "%")</p>
								<p class="fst-italic mb-1">@(archetypes[i].OptionalParam != null ? string.Format(archetypes[i].ArchetypeMeta.MaxDesc, archetypes[i].OptionalParam) : archetypes[i].ArchetypeMeta.MaxDesc)</p>
								<svg class="archetype-svg">
									<line x1="0%" y1="10" x2="100%" y2="10" style="stroke:rgb(255,255,255);stroke-width:10" />
									<line x1="0%" y1="10" x2="@(archetypes[i].Value + "%")" y2="10" style="stroke:rgb(249, 208, 64);stroke-width:10" />
								</svg>
							</div>
						}
					}
				</div>
				<div class="results-divider"></div>
				<h3 class="pb-3 mt-3">Dual Archetypes</h3>
				<div class="archetypes-dual">
					@{
						var archetypesDual = Model.DualArchetypes.ToArray();
						@for (int i = 0; i < Model.DualArchetypes.Count(); i++)
						{
							<div class="archetype">
								@if (archetypesDual[i].Value > 25)
								{
									<h4 class="m-0">@archetypesDual[i].ArchetypeMeta.MaxName<sup><i title="@archetypesDual[i].ArchetypeMeta.Description" class="bi bi-question-circle fs-6 text-primary"></i></sup></h4>
									<p class="text-secondary m-0">@(archetypesDual[i].Value + "%")</p>
									<p class="fst-italic mb-1">@(archetypesDual[i].OptionalParam != null ? string.Format(archetypesDual[i].ArchetypeMeta.MaxDesc, archetypesDual[i].OptionalParam) : archetypesDual[i].ArchetypeMeta.MaxDesc)</p>
								}
								else if (archetypesDual[i].Value < -25)
								{
									<h4 class="m-0">@archetypesDual[i].ArchetypeMeta.MinName<sup><i title="@archetypesDual[i].ArchetypeMeta.Description" class="bi bi-question-circle fs-6 text-primary"></i></sup></h4>
									<p class="text-secondary m-0">@(Math.Abs((int)archetypesDual[i].Value) + "%")</p>
									<p class="fst-italic mb-1">@(archetypesDual[i].OptionalParam != null ? string.Format(archetypesDual[i].ArchetypeMeta.MinDesc, archetypesDual[i].OptionalParam) : archetypesDual[i].ArchetypeMeta.MinDesc)</p>
								}
								else
								{
									<h4 class="m-0">@(archetypesDual[i].ArchetypeMeta.Name)<sup><i title="@archetypesDual[i].ArchetypeMeta.Description" class="bi bi-question-circle fs-6 text-primary"></i></sup></h4>
									<p class="text-secondary mb-1">@(Math.Abs((int)archetypesDual[i].Value) + "%")</p>
								}
								<svg class="archetype-svg">
									<line x1="0%" y1="10" x2="100%" y2="10" style="stroke:rgb(255,255,255);stroke-width:10" />
									<line x1="0%" y1="10" x2="@((50 + (archetypesDual[i].Value / 2)) + "%")" y2="10" style="stroke:rgb(249, 208, 64);stroke-width:10" />
								</svg>
							</div>
						}
					}
				</div>

			</div>
		</div>
		<div class="col-lg-6 col-xs-12">
			<div class="user-trophies">
				<h3 class="pb-3">Trophies</h3>
				<div class="row public-trophies">
					@{
						var trophies = Model.Trophies.Where(x => x.TrophyMeta.IsSecret == false).OrderBy(x => x.TrophyMeta.Order).ToArray();
						@foreach (var trophy in trophies)
						{
							<div class="trophy col-sm-6 col-xs-12">
								<img src=@(trophy.IsAchieved ? "/assets/trophy-unlocked.png" : "/assets/trophy-locked.png") alt=@(trophy.IsAchieved ? "Achieved" : "Unachieved")>
								<h4 class="mt-2 mb-0">@trophy.TrophyMeta.Name</h4>
								<p class="mb-0">@trophy.TrophyMeta.Description</p>
								<p class="fw-normal fst-italic text-break">@trophy.TrophyMeta.Quote</p>
							</div>
						}
					}
				</div>
				<div class="results-divider"></div>
				<h3 class="mt-3">Secret Trophies</h3>
				<p class="pb-3">These are secret trophies! You won't know the details for these trophies until you unlock them.</p>
				<div class="row secret-trophies">
					@{
						var secrets = Model.Trophies.Where(x => x.TrophyMeta.IsSecret == true).OrderBy(x => x.TrophyMeta.Order).ToArray();
						@foreach (var trophy in secrets)
						{
							<div class="trophy col-sm-6 col-xs-12">
								<img style="max-width: 128px" src=@(trophy.IsAchieved ? "/assets/trophy-unlocked.png" : "/assets/trophy-locked.png") alt=@(trophy.IsAchieved ? "Achieved" : "Unachieved")>
								@if (trophy.IsAchieved)
								{
									<h4 class="mt-2 mb-0">@(trophy.IsAchieved ? trophy.TrophyMeta.Name : "???")</h4>
									<p class="mb-0">@trophy.TrophyMeta.Description</p>
									<p class="fw-normal fst-italic text-break mb-4">@trophy.TrophyMeta.Quote</p>
								}
								else
								{
									<h4 class="mt-2 mb-4">???</h4>
								}

							</div>
						}
					}
				</div>
			</div>
		</div>

	</div>
</div>

